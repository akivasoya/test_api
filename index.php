<?php	error_reporting(E_ALL);	ini_set('display_errors', '1');		$MAIL_APPS = array(		'rainloop' => 'Rainloop',		'mailpile' => 'Mailpile',		'mailcow' => 'MailCow',		'kolab' => 'Kolab',		'iredmail' => 'iRedMail',		'horde' => 'Horde',		'hmail' => 'hMail',		'mail_in_a_box' => 'Mail-in-a-Box',		'isotope' => 'Isotope',		'sogo' => 'SOGo',		'zimbra' => 'Zimbra',		'webmail_lite' => 'WebMailLite',		'squirrelmail' => 'SquirrelMail',		'neutronmail' => 'NeutronMail',		'protonmail' => 'ProtonMail',		'cypht' => 'Cypht',		'cacocloud' => 'CacoCloud',		'modoboa' => 'Modoboa',		'open_xchange' => 'Open-Xchange',		'turing' => 'Turing',		'trulymail' => 'TrulyMail',		'safe_mail' => 'Safe-mail.net',		'atmail' => 'Atmail',		'nocc' => 'NOCC',		'neomail' => 'NeoMail',		'phlymail' => 'phlyMail',		'privmx' => 'PrivMX',		'postaci' => 'Postaci',		'mrmail' => 'MrMail',		'wordsecure' => 'WordSecure',		'current_domain' => $_SERVER['HTTP_HOST'],	);	if(!isset($_POST) || empty($_POST)){		exit('Provide data first.');	}		validate_data();		$TO  = $_POST['to'];	$subject = $_POST['subject'];	$message = $_POST['message'];	$altBody = (isset($_POST['altBody'])) ? $_POST['altBody'] : '';	$SMTPS = $_POST['SMTPS'];	$CC = (isset($_POST['CC'])) ? $_POST['CC'] : array();	$BCC = (isset($_POST['BCC'])) ? $_POST['BCC'] : array();	$SMTPDebug = (isset($_POST['SMTPDebug'])) ? $_POST['SMTPDebug'] : 0;		$HEADER['content_type']   = (isset($_POST['content_type'])) ? $_POST['content_type'] : 'text/plain';	$HEADER['chat_set']   = (isset($_POST['chat_set'])) ? $_POST['chat_set'] : 'utf-8';	$HEADER['chat_encoding']   = (isset($_POST['chat_encoding'])) ? $_POST['chat_encoding'] : '8bit';		$HEADER['x_type']   = (isset($_POST['x_type'])) ? $_POST['x_type'] : '1';  // 1 => x_mailer  , 2 => user_agent , 3 :  => None	$HEADER['x_type_value']   = (isset($_POST['x_type_value'])) ? $_POST['x_type_value'] : '';	//$HEADER['x_mailer']   = (isset($_POST['x_mailer'])) ? $_POST['x_mailer'] : '';	//$HEADER['user_agent']   = (isset($_POST['user_agent'])) ? $_POST['user_agent'] : '';						$res = send_email_tthrough_PHPMailer($TO, $subject, $message, $altBody, $SMTPS, $CC, $BCC, $SMTPDebug, $HEADER);	print_r($res);exit;		//Validate Post Data	function validate_data(){		$error = array();				if(!isset($_POST['to']) || empty($_POST['to'])){			$error[] = "Provide to";		}				/*if(!isset($_POST['subject']) || empty($_POST['subject'])){			$error[] = "Provide subject";		}*/				if(!isset($_POST['message']) || empty($_POST['message'])){			$error[] = "Provide message";		}				if(!empty($error))			exit('Provide valid data');		else			return true;    	}	function send_email_tthrough_PHPMailer($TO=array(), $subject='', $message='', $altBody='', $SMTPS=array(), $CC=array(), $BCC=array(), $SMTPDebug = 0, $HEADER= array()){        $body = "$message";                require 'PHPMailer/mail.php';                //Tell PHPMailer to use SMTP        $mail->isSMTP();				$mail->ContentType = $HEADER['content_type']; //    'text/plain'     'text/calendar'     'text/html'   'multipart/alternative'   'multipart/mixed'   'multipart/related';        $mail->CharSet = $HEADER['chat_set'];		$mail->Encoding = $HEADER['chat_encoding'];   // '7bit'    '8bit'   'base64'   'binary'    'quoted-printable'				if(@$HEADER['x_type'] == 1){			@$mail->XMailer = ($HEADER['x_type_value']) ? $HEADER['x_type_value'] : '';		}elseif(@$HEADER['x_type'] == 2){			@$mail->UserAgent = ($HEADER['x_type_value']) ? $HEADER['x_type_value'] : '';		}else{			@$mail->XMailer = '';			@$mail->UserAgent = '';		}		@$mail->boundary_1 = '_Part_'.rand(123456789,987654321).'_'.rand(1234567890,9876543210).'.'.time();		        //Enable SMTP debugging        // 0 = off (for production use)        // 1 = client messages        // 2 = client and server messages        $mail->SMTPDebug = $SMTPDebug;        //Set the hostname of the mail server        $mail->Host = $SMTPS['hostname'];        // use        // $mail->Host = gethostbyname('smtp.gmail.com');        // if your network does not support SMTP over IPv6        //Set the SMTP port number - 587 for authenticated TLS, a.k.a. RFC4409 SMTP submission        $mail->Port = $SMTPS['port'];        //Set the encryption system to use - ssl (deprecated) or tls        $mail->SMTPSecure = (($SMTPS['port'] == 465) ? 'ssl' : (($SMTPS['port'] == 587) ? 'tls' : false));        //Whether to use SMTP authentication        $mail->SMTPAuth = ($SMTPS['port'] == 25) ? false : true;        //Username to use for SMTP authentication - use full email address for gmail        $mail->Username = $SMTPS['username'];        //Password to use for SMTP authentication        $mail->Password = $SMTPS['password'];		        //DEV@R change        $mail->SMTPAutoTLS = (($SMTPS['port'] == 465) ? false : (($SMTPS['port'] == 587) ? true : false));                //Set who the message is to be sent from        $mail->setFrom($SMTPS['from_email'], $SMTPS['from_name']);                //Set an alternative reply-to address        if(in_array('reply_to', array_keys($SMTPS)) && $SMTPS['reply_to'] != ''){            @$mail->addReplyTo($SMTPS['reply_to'], $SMTPS['reply_to_name']);        }else{            @$mail->addReplyTo($SMTPS['from_email'], $SMTPS['from_name']);        }                //Set who the message is to be sent to        $mail->addAddress(trim($TO['email']), trim($TO['name']));        //Set the subject line        $mail->Subject = $subject;        //Read an HTML message body from an external file, convert referenced images to embedded,        //convert HTML into a basic plain-text alternative body        		if($HEADER['content_type'] == 'text/plain'){			$mail->Body = $body;		}else{        	$mail->msgHTML($body);        }		        //Replace the plain text body with one created manually		if($HEADER['content_type'] == 'multipart/alternative'){        	$mail->AltBody = $body;        }		        //Attach an image file        //$mail->addAttachment('images/phpmailer_mini.png');		        if(!empty($CC)){            foreach($CC as $k => $cced){                $mail->AddCC($cced['email'], $cced['name']);            }        }                if(!empty($BCC)){            foreach($BCC as $k => $bcced){                $mail->AddBCC($bcced['email'], $bcced['name']);            }        }                //echo '<pre>'; print_r($mail);exit;        //send the message, check for errors        if (!$mail->send()) {            if($SMTPDebug == 1){              echo "Mailer Error: " . $mail->ErrorInfo;            }            $error = $mail->ErrorInfo;            unset($mail);            return $error;        } else {            unset($mail);            return '1';            //Section 2: IMAP            //Uncomment these to save your message in the 'Sent Mail' folder.            #if (save_mail($mail)) {            #    echo "Message saved!";            #}        }}